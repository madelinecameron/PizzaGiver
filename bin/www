#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('PizzaForYou:server');
var http = require('http');
var dominos = require('dominos');
var hogan = require('hjs');
var mongoose = require('mongoose');
var fs = require('fs');
var shortid = require('shortid');

/**
 * Get port from environment and store in Express.
 */
var pizzaDB = mongoose.connect("mongodb://root:pizza@ds047911.mongolab.com:47911/pizzaforyou");
console.log("Database connection successful!");

var orderSchema = new mongoose.Schema({
    _id: { type: String, unique: true },
    pizzaId: { type: String, required: true },
    storeId: { type: String, required: true },
    address: { type: String, required: true },
    name: { type: String, required: true },
    message: { type: String, required: false, default: "Thank you! :)" },
    email: { type: String, required: true }
});

var Order = mongoose.model('Orders', orderSchema);

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

io.on("connection", function(socket) {
    var response = "";
    socket.on('getStores', function(data) {
        console.log("Got the message!");
        var html = "";
        if(data.zip == null) {
            return;
        }
        if(data.address == null && data.town != null) {
            dominos.store.find(data.town + " " + data.zip, function(storeData) {
                fs.readfile('./views/store.mustache', function(err, data) {
                    if (err) {
                        console.log(err);
                    }
                    var template = hogan.compile(data);
                    var html = "";
                    var stores = storeData.result.Stores;
                    for (store in stores) {
                        if (store.IsOpen && store.IsOnlineCapable && store.IsOnlineNow) {
                            html += template.render(store);
                        }
                    }
                    console.log(html);
                });
                console.log("Sending message");
                socket.emit('giveStores', 'Test');
            });
        }

        if(data.address != null && data.town != null) {
            dominos.store.find(data.address + " " + data.town + " " + data.zip, function(storeData) {
                fs.readFile('./views/store.mustache', function(err, data) {
                    if (err) {
                        console.log(err);
                    }
                    var template = hogan.compile(data.toString());
                    var stores = storeData.result.Stores;
                    stores.forEach(function (store) {
                        if (store.IsOpen && store.IsOnlineCapable && store.IsOnlineNow) {
                            html += template.render(store);
                        }
                    });
                    if(html == "") {
                        html = "<b>No stores are open or around! ):</b>";
                    }
                    dominos.store.menu(1546, function(data) {
                        //console.log(data.result.Products);
                    });
                    //console.log("Sending %s", html.replace('\n', ''));
                    socket.emit('giveStores', html.replace('\n', ''));
                });
            });
        }
    });

    socket.on('finalizeOrder', function(data) {
        Order.create({
            _id: shortid.generate(),
            pizzaId: data.pizzaId,
            storeId: data.storeId,
            address: data.address,
            name: data.name,
            message: data.msg,
            email: data.email
        }, function(err, order) {
            console.log("Error: " + err);
            console.log(order);
            //socket.emit('orderFinalized', '<p>http://pizza.maddie.space/pay/' + order.orderId + '</p>');
        });
    });
});

function compileStoreHTML(storeData) {
    var rawHtml = ('');
}
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
